name: Build Docker Image

on:
  # 仅允许手动触发
  workflow_dispatch:

env:
  # Docker Hub 镜像名称
  DOCKER_IMAGE: superng6/nginx
  # GitHub Container Registry (ghcr.io) 镜像名称
  GHCR_IMAGE: ghcr.io/superng6/nginx

jobs:
  # Job 1: 准备阶段 - 从文件获取版本号
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Version from ReleaseTag file
        id: set-version
        run: |
          # 从 ReleaseTag 文件第一行读取版本号，并清理所有空白字符和回车符
          VERSION=$(head -n 1 ReleaseTag | xargs)

          # 再次检查清理后的版本号是否为空
          if [[ -z "$VERSION" ]]; then
            echo "::error::Version is empty after reading from ReleaseTag. Please check the file."
            exit 1
          fi
          
          echo "Found NGINX version: ${VERSION}"
          # 将版本号设置为后续 Job 可以使用的输出变量
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

  # Job 2: 构建阶段 - 使用矩阵为多平台分别构建
  build:
    runs-on: ubuntu-latest
    needs: get-version
    permissions:
      contents: read
      packages: write # 需要写 ghcr.io 的权限
    strategy:
      fail-fast: false
      matrix:
        # 你可以按需增删平台
        platform:
          - linux/386
          - linux/amd64
          - linux/arm/v6
          - linux/arm/v7
          - linux/arm64
          - linux/ppc64le
          - linux/s390x
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Prepare platform name for artifact
        run: echo "PLATFORM_PAIR=${{ matrix.platform }}" | tr '/' '-' >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Display Received Version
        run: echo "Building with NGINX_VERSION = ${{ needs.get-version.outputs.version }}"

      - name: Build and Push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          build-args: |
            NGINX_VERSION=${{ needs.get-version.outputs.version }}
          # 初始推送时不打标签，只按摘要(digest)推送到双仓库
          tags: |-
            ${{ env.DOCKER_IMAGE }}
            ${{ env.GHCR_IMAGE }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha,scope=${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          # 将摘要写入一个空文件，文件名就是摘要本身
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest as artifact
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          retention-days: 1

  # Job 3: 合并阶段 - 创建 manifest list 并打上最终标签
  merge-and-tag:
    runs-on: ubuntu-latest
    needs: [get-version, build]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all digests
        uses: actions/download-artifact@v4
        with:
          pattern: digests-* # 下载所有以 digests- 开头的 artifact
          path: /tmp/digests
          merge-multiple: true # 将所有下载的 artifact 合并到一个目录

      - name: Create and Push manifest list
        working-directory: /tmp/digests
        run: |
          # 检查目录是否为空，如果为空则说明构建失败
          if [ -z "$(ls -A .)" ]; then
            echo "Error: No digests found to merge."
            exit 1
          fi

          echo "Creating manifest list for dual registries with tags: latest, stable-${{ needs.get-version.outputs.version }}"

          # 使用 imagetools 将所有平台的镜像摘要合并成一个 manifest list，并打上最终的标签
          docker buildx imagetools create \
            --tag ${{ env.DOCKER_IMAGE }}:latest \
            --tag ${{ env.DOCKER_IMAGE }}:stable-${{ needs.get-version.outputs.version }} \
            --tag ${{ env.GHCR_IMAGE }}:latest \
            --tag ${{ env.GHCR_IMAGE }}:stable-${{ needs.get-version.outputs.version }} \
            $(printf '${{ env.DOCKER_IMAGE }}@sha256:%s ' *)

      - name: Inspect final images
        if: always()
        run: |
          echo "--- Inspecting Docker Hub image ---"
          docker buildx imagetools inspect ${{ env.DOCKER_IMAGE }}:latest
          echo "--- Inspecting GHCR image ---"
          docker buildx imagetools inspect ${{ env.GHCR_IMAGE }}:latest
